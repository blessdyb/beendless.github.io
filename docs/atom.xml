<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Beendless ~ 快节奏,慢生活,无止境</title>
  
  <subtitle>Move Fast, Live Happily, With No End</subtitle>
  <link href="http://blog.beendless.com/atom.xml" rel="self"/>
  
  <link href="http://blog.beendless.com/"/>
  <updated>2021-08-25T03:25:28.583Z</updated>
  <id>http://blog.beendless.com/</id>
  
  <author>
    <name>Yabo Du &amp; Yanrong Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Remove Linked List Elements</title>
    <link href="http://blog.beendless.com/2021/08/24/Remove-Linked-List-Elements/"/>
    <id>http://blog.beendless.com/2021/08/24/Remove-Linked-List-Elements/</id>
    <published>2021-08-25T05:45:23.000Z</published>
    <updated>2021-08-25T03:25:28.583Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s take a look at a easy problem on Leetcode <a href="https://leetcode.com/problems/remove-linked-list-elements/">203. Remove Linked List Elements</a>. We will demonstrate how to remove elements from a linked list.</p><p>Basically there are two ways to make it done. </p><p>a. Since all nodes in the linked list have a previous node except the head node, we can use those node’s previous node to delete those node. But if we have to remove the head node, we need to use a special logic. </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElements</span><span class="params">(head *ListNode, val <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> ; head != <span class="literal">nil</span> &amp;&amp; head.Val == val; &#123;</span><br><span class="line">        head = head.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> p := head; p != <span class="literal">nil</span> &amp;&amp; p.Next != <span class="literal">nil</span>; &#123;</span><br><span class="line">        <span class="keyword">if</span> p.Val == val &#123;</span><br><span class="line">            p.Next = p.Next.Next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p = p.Next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/ij55kvVD3aM">https://play.golang.org/p/ij55kvVD3aM</a></p><p>b. We can also add a virtual node to point to the head node, so all nodes including the head node have a previous node. With this change.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElements</span><span class="params">(head *ListNode, val <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">virtualNode := &amp;ListNode&#123;<span class="number">0</span>, head&#125;</span><br><span class="line"><span class="keyword">for</span> p := virtualNode; p != <span class="literal">nil</span> &amp;&amp; p.Next != <span class="literal">nil</span>; &#123;</span><br><span class="line"><span class="keyword">if</span> p.Next.Val == val &#123;</span><br><span class="line">p.Next = p.Next.Next</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> virtualNode.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/1tvSzIGDAm7">https://play.golang.org/p/1tvSzIGDAm7</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Let’s take a look at a easy problem on Leetcode &lt;a href=&quot;https://leetcode.com/problems/remove-linked-list-elements/&quot;&gt;203. Remove Linked L</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Golang" scheme="http://blog.beendless.com/tags/Golang/"/>
    
    <category term="Algorithms" scheme="http://blog.beendless.com/tags/Algorithms/"/>
    
    <category term="Leetcode" scheme="http://blog.beendless.com/tags/Leetcode/"/>
    
    <category term="Linked List" scheme="http://blog.beendless.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>Traverse Spiral Matrix</title>
    <link href="http://blog.beendless.com/2021/08/18/Spiral-Matrix/"/>
    <id>http://blog.beendless.com/2021/08/18/Spiral-Matrix/</id>
    <published>2021-08-19T05:45:23.000Z</published>
    <updated>2021-08-24T16:13:26.643Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Traverse Spiral Matrix</li></ol><p>The trick of traverse a matrix in spiral order is that we need to have flags to keep the boundary. Let’s check LeetCode problerm <a href="https://leetcode.com/problems/spiral-matrix/">54. Spiral Matrix</a></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">spiralOrder</span><span class="params">(matrix [][]<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">rows, columns := <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">length := rows * columns</span><br><span class="line">ret := <span class="built_in">make</span>([]<span class="keyword">int</span>, length)</span><br><span class="line">up, down, left, right := <span class="number">0</span>, rows<span class="number">-1</span>, <span class="number">0</span>, columns<span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; &#123;</span><br><span class="line"><span class="keyword">for</span> j := left; j &lt;= right; j++ &#123;</span><br><span class="line">ret[i] = matrix[up][j]</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := up + <span class="number">1</span>; j &lt;= down; j++ &#123;</span><br><span class="line">ret[i] = matrix[j][right]</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> up != down &#123;</span><br><span class="line"><span class="keyword">for</span> j := right - <span class="number">1</span>; j &gt;= left; j-- &#123;</span><br><span class="line">ret[i] = matrix[down][j]</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> left != right &#123;</span><br><span class="line"><span class="keyword">for</span> j := down - <span class="number">1</span>; j &gt; up; j-- &#123;</span><br><span class="line">ret[i] = matrix[j][left]</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">up++</span><br><span class="line">down--</span><br><span class="line">left++</span><br><span class="line">right--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/MTcaLR-vu0g">https://play.golang.org/p/MTcaLR-vu0g</a></p><p>Similar to the problem above, there’s another one which the start of the spiral is given as part of the input. <a href="https://leetcode.com/problems/spiral-matrix-iii/">885. Spiral Matrix III</a></p><ol start="2"><li>Generate Spiral Matrix</li></ol><p>Same as spiral matrix traversal, let’s resolve LeetCode problerm <a href="https://leetcode.com/problems/spiral-matrix-ii/">59. Spiral Matrix II</a></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateMatrix</span><span class="params">(n <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">ret := <span class="built_in">make</span>([][]<span class="keyword">int</span>, n)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">ret[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">&#125;</span><br><span class="line">total := n * n</span><br><span class="line">up, down, left, right := <span class="number">0</span>, n<span class="number">-1</span>, <span class="number">0</span>, n<span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= total; &#123;</span><br><span class="line"><span class="keyword">for</span> j := left; j &lt;= right; j++ &#123;</span><br><span class="line">ret[up][j] = i</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := up + <span class="number">1</span>; j &lt;= down; j++ &#123;</span><br><span class="line">ret[j][right] = i</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> up != down &#123;</span><br><span class="line"><span class="keyword">for</span> j := right - <span class="number">1</span>; j &gt;= left; j-- &#123;</span><br><span class="line">ret[down][j] = i</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> left != right &#123;</span><br><span class="line"><span class="keyword">for</span> j := down - <span class="number">1</span>; j &gt; up; j-- &#123;</span><br><span class="line">ret[j][left] = i</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">up++</span><br><span class="line">down--</span><br><span class="line">left++</span><br><span class="line">right--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/q-CBvye-xx6">https://play.golang.org/p/q-CBvye-xx6</a></p><ol start="3"><li>Spiral Traverse with Dynamic Starting Point</li></ol><p>The key points to resolve LeetCode problem <a href="https://leetcode.com/problems/spiral-matrix-iii/">885. Spiral Matrix III</a> :<br>a. After observing the spiral path, you can get the pattern of the step sequence: <code>1, 1, 2, 2, 3, 3, 4, 4</code><br>b. Figure out a way to make a spiral circle <code>n % 4</code></p><p>With those in mind, we can get a solution</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">spiralMatrixIII</span><span class="params">(rows <span class="keyword">int</span>, cols <span class="keyword">int</span>, rStart <span class="keyword">int</span>, cStart <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">ret := [][]<span class="keyword">int</span>&#123;&#123;rStart, cStart&#125;&#125;</span><br><span class="line">directions := [<span class="number">4</span>][<span class="number">2</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i, d := <span class="number">0</span>, <span class="number">0</span>; <span class="built_in">len</span>(ret) &lt; rows*cols; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; i/<span class="number">2</span>+<span class="number">1</span>; j++ &#123;</span><br><span class="line">rStart += directions[d%<span class="number">4</span>][<span class="number">0</span>]</span><br><span class="line">cStart += directions[d%<span class="number">4</span>][<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> rStart &lt; <span class="number">0</span> || cStart &lt; <span class="number">0</span> || rStart &gt;= rows || cStart &gt;= cols &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">ret = <span class="built_in">append</span>(ret, []<span class="keyword">int</span>&#123;rStart, cStart&#125;)</span><br><span class="line">&#125;</span><br><span class="line">d++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/bPk8zAyAqe2">https://play.golang.org/p/bPk8zAyAqe2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;Traverse Spiral Matrix&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The trick of traverse a matrix in spiral order is that we need to have flags to keep the bound</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Golang" scheme="http://blog.beendless.com/tags/Golang/"/>
    
    <category term="Algorithms" scheme="http://blog.beendless.com/tags/Algorithms/"/>
    
    <category term="Leetcode" scheme="http://blog.beendless.com/tags/Leetcode/"/>
    
    <category term="Matrix" scheme="http://blog.beendless.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>Two Pointers Array</title>
    <link href="http://blog.beendless.com/2021/08/17/Two-Pointers-Array-Elements-In-Placed-Removal/"/>
    <id>http://blog.beendless.com/2021/08/17/Two-Pointers-Array-Elements-In-Placed-Removal/</id>
    <published>2021-08-18T05:45:23.000Z</published>
    <updated>2021-08-19T01:04:51.308Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Array Elements In-Placed Removal</li></ol><p>Let’s take a look at a easy problem on Leetcode <a href="https://leetcode.com/problems/remove-element/">27. Remove Element</a>. We will demonstrate how to remove an element from an array without allocating extra space for another array.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line">ret := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j: = <span class="number">0</span>; j &lt; length; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[j] != val &#123;</span><br><span class="line"><span class="keyword">if</span> ret &lt; j &#123;</span><br><span class="line">nums[ret] = nums[j]</span><br><span class="line">&#125;</span><br><span class="line">ret++</span><br><span class="line">&#125;</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/bhOG7VWIE0-">https://play.golang.org/p/bhOG7VWIE0-</a></p><ol start="2"><li>Squares of a Sorted Array</li></ol><p>Here is another problem on Leetcode <a href="https://leetcode.com/problems/squares-of-a-sorted-array/">977. Squares of a Sorted Array</a>. The straight forward solution will be calculate the squares of the given array with an O(n) loop and then use fast sort to get a result O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="7.348ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 3247.9 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(766.7,0)"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(2044.7,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2211.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2647.9,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container>). So the complexity will be O(n + <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="7.348ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 3247.9 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(766.7,0)"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(2044.7,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2211.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2647.9,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container>). Let’s review the sorted array again. For the squares of the given array, the maximum squred number can only exist on either left end or right end. It means if we have two pointers start at both ends, we can continus comparing the squred number and move the pointer inward, the pointers will meet at the minumum squred number. So the time complexity will be O(n)</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortedSquares</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    length := <span class="built_in">len</span>(nums)</span><br><span class="line">    ret := <span class="built_in">make</span>([]<span class="keyword">int</span>, length, length)</span><br><span class="line">    <span class="keyword">for</span> i, j, k := <span class="number">0</span>, length - <span class="number">1</span>, length <span class="number">-1</span>; k &gt;= <span class="number">0</span>; k-- &#123;</span><br><span class="line">        squred_i := nums[i] * nums[i]</span><br><span class="line"> squred_j := nums[j] * nums[j]</span><br><span class="line"> <span class="keyword">if</span> squred_j &gt; squred_i &#123;</span><br><span class="line"> ret[k] = squred_j</span><br><span class="line">            j--</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> ret[k] = squred_i</span><br><span class="line">            i++</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/h_rFxkg42a4">https://play.golang.org/p/h_rFxkg42a4</a></p><ol start="3"><li>Sliding window</li></ol><p>Generally speaking, a sliding window is a sub-list than runs over an underlying collection. This technique shows how a nested for loop in some array related problems can be converted to a single for loop to reduce the time complexity. Here is a Leetcode problem <a href="https://leetcode.com/problems/minimum-size-subarray-sum/">209. Minimum Size Subarray Sum</a>. We can easily solve it with two nested loops with O(n<sup>2</sup>) time complexity. Let’s see how we can optimize it with two pointers sliding window.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minSubArrayLen</span><span class="params">(target <span class="keyword">int</span>, nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">ret := <span class="number">0</span></span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="number">0</span>; j &lt; length; j++ &#123;</span><br><span class="line">sum += nums[j]</span><br><span class="line"><span class="keyword">for</span> sum &gt;= target &#123;</span><br><span class="line">subLength := j - i + <span class="number">1</span> <span class="comment">// Note: the length of subArray need +1</span></span><br><span class="line"><span class="keyword">if</span> ret == <span class="number">0</span> || subLength &lt; ret &#123;</span><br><span class="line">ret = subLength</span><br><span class="line">&#125;</span><br><span class="line">sum -= nums[i]</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/EjMpnZJvBaW">https://play.golang.org/p/EjMpnZJvBaW</a></p><p>Since all elements will be visited by the sliding window at most twice (entering or exiting), so the time complexity is O(n) instead of O(n<sup>2</sup>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;Array Elements In-Placed Removal&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s take a look at a easy problem on Leetcode &lt;a href=&quot;https://leetcode.com/proble</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Golang" scheme="http://blog.beendless.com/tags/Golang/"/>
    
    <category term="Algorithms" scheme="http://blog.beendless.com/tags/Algorithms/"/>
    
    <category term="Leetcode" scheme="http://blog.beendless.com/tags/Leetcode/"/>
    
    <category term="Array" scheme="http://blog.beendless.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Time Complexity Calculation Template</title>
    <link href="http://blog.beendless.com/2021/08/16/Time-Complexity-Calculation-Template/"/>
    <id>http://blog.beendless.com/2021/08/16/Time-Complexity-Calculation-Template/</id>
    <published>2021-08-17T05:45:23.000Z</published>
    <updated>2021-08-17T16:00:21.558Z</updated>
    
    <content type="html"><![CDATA[<ol><li>O(n)</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>O(n<sup>2</sup>)</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>O(n<sup>2</sup>)</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; i; j++ &#123;</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>Explaination</em>:</p><table><thead><tr><th>i</th><th>j</th></tr></thead><tbody><tr><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td></tr><tr><td>…</td><td>…</td></tr><tr><td>n</td><td>n</td></tr></tbody></table><p>So the complexity is : <code>1 + 2 + 3 + ... + n = n * (n + 1) / 2</code> = O(n<sup>2</sup>)</p><ol start="4"><li>O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.491ex" xmlns="http://www.w3.org/2000/svg" width="3.287ex" height="2.398ex" role="img" focusable="false" viewBox="0 -843 1453 1060" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msqrt"><g transform="translate(853,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g><g data-mml-node="mo" transform="translate(0,-17)"><use data-c="221A" xlink:href="#MJX-1-TEX-N-221A"></use></g><rect width="600" height="60" x="853" y="723"></rect></g></g></g></svg></mjx-container>)</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="number">0</span>; j &lt; n; i++ &#123;</span><br><span class="line">j += i</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>Explaination</em>:</p><table><thead><tr><th>i</th><th>j</th></tr></thead><tbody><tr><td>0</td><td>0</td></tr><tr><td>1</td><td>0 + 1</td></tr><tr><td>2</td><td>0 + 1 + 2</td></tr><tr><td>3</td><td>0 + 1 + 2 + 3</td></tr><tr><td>…</td><td>…</td></tr><tr><td>k</td><td>0 + 1 + 2 + 3 + … + k</td></tr></tbody></table><p>We need to find the solution for <code>1 + 2 + 3 + ... + k &gt; n</code> =&gt; <code>k</code> &gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.491ex" xmlns="http://www.w3.org/2000/svg" width="3.287ex" height="2.398ex" role="img" focusable="false" viewBox="0 -843 1453 1060" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msqrt"><g transform="translate(853,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g><g data-mml-node="mo" transform="translate(0,-17)"><use data-c="221A" xlink:href="#MJX-1-TEX-N-221A"></use></g><rect width="600" height="60" x="853" y="723"></rect></g></g></g></svg></mjx-container></p><ol start="5"><li>O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container>)</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i *= <span class="number">2</span> &#123;</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>Explaination</em>:</p><p>We need to find the solution for <code>2&lt;sup&gt;k&lt;/sup&gt;</code> &lt; <code>n</code> =&gt;  <code>k</code> &lt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container></p><ol start="6"><li>O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container>)</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := n; i &gt;= <span class="number">1</span>; i /= <span class="number">2</span> &#123;</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>Explaination</em>:</p><p>We need to find the solution for <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.641ex" height="2.497ex" role="img" focusable="false" viewBox="0 -853.7 2051.4 1103.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><use data-c="2F" xlink:href="#MJX-1-TEX-N-2F"></use></g></g><g data-mml-node="msup" transform="translate(1100,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g></g></g></g></svg></mjx-container> &gt; 1 =&gt;  <code>k</code> &lt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container></p><ol start="7"><li>O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.491ex" xmlns="http://www.w3.org/2000/svg" width="3.287ex" height="2.398ex" role="img" focusable="false" viewBox="0 -843 1453 1060" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msqrt"><g transform="translate(853,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g><g data-mml-node="mo" transform="translate(0,-17)"><use data-c="221A" xlink:href="#MJX-1-TEX-N-221A"></use></g><rect width="600" height="60" x="853" y="723"></rect></g></g></g></svg></mjx-container>)</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i * i &lt; n; i++ &#123;</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>Explaination</em>:</p><p>We need to find the solution for k<sup>2</sup> &lt; n =&gt;  <code>k</code> &lt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.491ex" xmlns="http://www.w3.org/2000/svg" width="3.287ex" height="2.398ex" role="img" focusable="false" viewBox="0 -843 1453 1060" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msqrt"><g transform="translate(853,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g><g data-mml-node="mo" transform="translate(0,-17)"><use data-c="221A" xlink:href="#MJX-1-TEX-N-221A"></use></g><rect width="600" height="60" x="853" y="723"></rect></g></g></g></svg></mjx-container></p><ol start="8"><li>Time complexity for resursion. </li></ol><p>a. T(n) = T(n - 1) + 1 =&gt; O(n)</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">x</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x(n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>b. T(n) = T(n - 1) + n =&gt;  O(n<sup>2</sup>)</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">x</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x(n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>Explaination</em>:</p><p>T(n) = T(n - 1) + n = T(n - 2) + (n - 1) + n = T(n - 3) + (n - 2) + (n - 1) + n = … = T(1) + 1 + 2 + 3 + … + n </p><p>c. T(n) = T(n - 1) + <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container> =&gt;  O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="7.348ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 3247.9 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(766.7,0)"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(2044.7,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2211.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2647.9,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container>)</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">x</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i *= <span class="number">2</span> &#123;</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x(n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>Explaination</em>:</p><p>Similar like 8.b, the time complexity will be <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.387ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2381.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g></g></g></svg></mjx-container> + <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.387ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2381.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g></g></svg></mjx-container> + <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.387ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2381.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mn"><use data-c="33" xlink:href="#MJX-1-TEX-N-33"></use></g></g></g></g></svg></mjx-container> + … + <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container> = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="6.243ex" height="2.086ex" role="img" focusable="false" viewBox="0 -716 2759.2 922" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600,0)"><use data-c="21" xlink:href="#MJX-1-TEX-N-21"></use></g></g></g></g></svg></mjx-container> ≈  n<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container></p><p>d. T(n) = 2 * T(n - 1) + 1 =&gt;  O(2<sup>n</sup>)</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">x</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i *= <span class="number">2</span> &#123;</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x(n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>Explaination</em>:</p><p>Similar like 8.b, the time complexity will be T(n) = 2 * T(n - 1) + 1 = 4 * T(n - 2) + 2 + 1 = 8 * T(n - 3) + 4 + 2 + 1 = … = 2<sup>n</sup> * T(0) + 2<sup>n-1</sup> + 2<sup>n-2</sup> + … + 4 + 2 + 1 = 2<sup>n + 1</sup>  - 1 [Geometric Sequence]</p><p>e. T(n) = T(n / 2) + 1 =&gt;  O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container>) [Classic Binary Search]</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">x</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line"><span class="keyword">return</span> x(n/<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>Explaination</em>:</p><p>Similar like 8.b, the time complexity will be T(n) = T(n - 1) + 1 = T(n - 2) + 1 + 1 = … = T(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container>) + <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container> * 1</p><p>f. T(n) = T(n / 2) + n =&gt;  O(n)</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">x</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x(n/<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>Explaination</em>:</p><p>Similar like 8.3, the time complexity will be T(n) = T(n/2) + n = T(n/4) + n / 2 + n = … = T(n/2<sup>k</sup>) + n / 2<sup>k-1</sup> + … + n / 2<sup>1</sup> + n / 2<sup>0</sup> = T(1) + n * (1 / 2<sup>k-1</sup> + … + 1 / 2<sup>1</sup> + 1 / 2<sup>0</sup>) = O(n) [Geometric Sequence]</p><p>g. T(n) = 2T(n / 2) + n =&gt;  O(n<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container>)</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">x</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x(n/<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>Explaination</em>:</p><p>Similar like 8.3, the time complexity will be T(n) = 2 * T(n/2) + n = 4 * T(n/4) + n + n = 8 * T(n / 8) + n + n + n = … = 2<sup>k</sup> * T(n / 2<sup>k</sup>) + k * n = n * T(1) + <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container> * n = O(n<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container>)</p><hr/><p>Now, Let’s take a look at a problem from Leetcode <a href="https://leetcode.com/problems/powx-n/">50. Pow(x, n)</a>.</p><p>a. Brute-force solution O(n) =&gt; template #8.a</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myPow</span><span class="params">(x <span class="keyword">float64</span>, n <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">upperBound := n</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">upperBound = -n</span><br><span class="line">&#125;</span><br><span class="line">ret := <span class="number">1.0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= upperBound; i++ &#123;</span><br><span class="line">ret *= x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> / ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/YxdrpGt-VXT">https://play.golang.org/p/YxdrpGt-VXT</a></p><p>b. Let’s try recursive solution I  O(n)</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recursivePow</span><span class="params">(x <span class="keyword">float64</span>, n <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> recursivePow(x, n<span class="number">-1</span>) * x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myPow</span><span class="params">(x <span class="keyword">float64</span>, n <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">upperBound := n</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">upperBound = -n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret := recursivePow(x, upperBound)</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> / ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/O_MPA_gORmA">https://play.golang.org/p/O_MPA_gORmA</a></p><p><strong>NOTE:</strong> This is still <strong>O(n)</strong> since the <code>recursivePow</code> was invoked <code>n</code> times</p><p>c. Let’s try recursive solution II</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recursivePow</span><span class="params">(x <span class="keyword">float64</span>, n <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> recursivePow(x, n/<span class="number">2</span>) * recursivePow(x, n/<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> recursivePow(x, n/<span class="number">2</span>) * recursivePow(x, n/<span class="number">2</span>) * x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myPow</span><span class="params">(x <span class="keyword">float64</span>, n <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">upperBound := n</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">upperBound = -n</span><br><span class="line">&#125;</span><br><span class="line">ret := recursivePow(x, upperBound)</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> / ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/m2azp6-WuLF">https://play.golang.org/p/m2azp6-WuLF</a></p><p><strong>NOTE:</strong>  Actually, this idea comes as a Divide &amp; Concor solution, but if you count how many times <code>recursivePow</code> are invoked, you will find that it’s still O(n). You can consider the input as a BST’s root node, so our target is to get the nodes number. It will be n.</p><p>d. Optimized cached recursive solution III O(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex" xmlns="http://www.w3.org/2000/svg" width="5.614ex" height="2.036ex" role="img" focusable="false" viewBox="0 -694 2481.2 900" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></g></svg></mjx-container>) =&gt; Template #6</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recursivePow</span><span class="params">(x <span class="keyword">float64</span>, n <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">ret := recursivePow(x, n/<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ret * ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret * ret * x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myPow</span><span class="params">(x <span class="keyword">float64</span>, n <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">upperBound := n</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">upperBound = -n</span><br><span class="line">&#125;</span><br><span class="line">ret := recursivePow(x, upperBound)</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> / ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/lzC2k6QgLlF">https://play.golang.org/p/lzC2k6QgLlF</a></p><p>The only difference between <code>c</code> and <code>d</code> is we cached the result of the function call <code>recursivePow</code>. This will be similar like the binary search, each time we save half of the computation time.</p><p>[Refs]</p><ul><li><a href="https://www.youtube.com/playlist?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O">https://www.youtube.com/playlist?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;O(n)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Golang" scheme="http://blog.beendless.com/tags/Golang/"/>
    
    <category term="Algorithms" scheme="http://blog.beendless.com/tags/Algorithms/"/>
    
    <category term="Leetcode" scheme="http://blog.beendless.com/tags/Leetcode/"/>
    
    <category term="Time complexity" scheme="http://blog.beendless.com/tags/Time-complexity/"/>
    
  </entry>
  
  <entry>
    <title>Binary Search Code Template Deep Dive</title>
    <link href="http://blog.beendless.com/2021/08/12/Binary-Search-Deep-Dive/"/>
    <id>http://blog.beendless.com/2021/08/12/Binary-Search-Deep-Dive/</id>
    <published>2021-08-13T05:45:23.000Z</published>
    <updated>2021-08-17T02:58:56.619Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s take a look at a easy problem on Leetcode <a href="https://leetcode.com/problems/binary-search/">704. Binary Search</a>. Besides the brute-force O(n) solution, it’s not hard to get the O(log(n)) solution from the constrains <code>unique</code> and <code>sorted in ascending order</code>. Binary search is one of the most basic algorithms we are using, but most people couldn’t get the right code.</p><p>Based on the open/close intervals, there are two different templates for Binary Search code:</p><h2 id="Left-closed-Right-closed-left-right"><a href="#Left-closed-Right-closed-left-right" class="headerlink" title="Left-closed, Right-closed [left, right]"></a>Left-closed, Right-closed [left, right]</h2><p>Two tips if you chose this one：</p><ul><li>Use <code>left &lt;= right</code> for the loop condition checking</li><li>When narrowing dow to a sub-range, use <code>left = middle + 1</code> or <code>right = middle - 1</code></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">start, end := <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> start &lt;= end &#123;</span><br><span class="line">middle := (start + end) / <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> nums[middle] == target &#123;</span><br><span class="line"><span class="keyword">return</span> middle</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[middle] &gt; target &#123;</span><br><span class="line">end = middle - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">start = middle + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/g_mimUUYz2H">https://play.golang.org/p/g_mimUUYz2H</a></p><h2 id="Left-closed-Right-opened-left-right"><a href="#Left-closed-Right-opened-left-right" class="headerlink" title="Left-closed, Right-opened [left, right)"></a>Left-closed, Right-opened [left, right)</h2><p>Samething above, two similar tips for this template:</p><ul><li>Use <code>left &lt; right</code> for the loop condition checking, it’s because 0-based array list, the right open interval is invalid index.</li><li>When narrowing down to a sub-range, use <code>left = middle + 1</code> and <code>right = middle</code> to keep the consistance of the intervals</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">left, right := <span class="number">0</span>, <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">middle := left + (right-left)/<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> nums[middle] == target &#123;</span><br><span class="line"><span class="keyword">return</span> middle</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[middle] &gt; target &#123;</span><br><span class="line">right = middle</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">left = middle + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang Playbook: <a href="https://play.golang.org/p/tkUkoNElKSV">https://play.golang.org/p/tkUkoNElKSV</a></p><p>Another important thing to keep in mind is that the range overflow. You may notice that when we calculate the new sub ranges above, we are using <code>middle := left + (right-left)/2</code> instead of <code>middle := (left + right)/2</code>. So what’s the difference between those two? Mathmatically there’s no difference, but in computer world, the later one postentially can cause an overflow issue when the range of the array is too large. <code>left + right</code> could be larger than the biggest <code>int</code>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Let’s take a look at a easy problem on Leetcode &lt;a href=&quot;https://leetcode.com/problems/binary-search/&quot;&gt;704. Binary Search&lt;/a&gt;. Besides th</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Golang" scheme="http://blog.beendless.com/tags/Golang/"/>
    
    <category term="Algorithms" scheme="http://blog.beendless.com/tags/Algorithms/"/>
    
    <category term="Leetcode" scheme="http://blog.beendless.com/tags/Leetcode/"/>
    
    <category term="Binary Search" scheme="http://blog.beendless.com/tags/Binary-Search/"/>
    
    <category term="Array" scheme="http://blog.beendless.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Understand Golang&#39;s Function Type</title>
    <link href="http://blog.beendless.com/2021/07/06/Understand%20Golang&#39;s%20Function%20Type/"/>
    <id>http://blog.beendless.com/2021/07/06/Understand%20Golang&#39;s%20Function%20Type/</id>
    <published>2021-07-06T09:20:48.000Z</published>
    <updated>2021-07-06T01:54:58.579Z</updated>
    
    <content type="html"><![CDATA[<p>Based on Golang’s <a href="http://weekly.golang.org/doc/go_spec.html#Function_types">function type</a> spec:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A function type denotes the set of all functions with the same parameter and result types</span><br></pre></td></tr></table></figure><p>And <a href="http://weekly.golang.org/doc/go_spec.html#Type_identity">type identity</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Two function types are identical if they have the same number of parameters and result types, corresponding parameters and result types are identical, and either both functions have variadic or neither is. Parameter and result names are not required to match</span><br></pre></td></tr></table></figure><p>It means that if two functions have the same signature(parameters and result types), they share one function type. Golang allows us to use the <code>type</code> keyword to define a <code>struct</code> (or <code>function type</code>). You may think it is just a sort of coding documentation, but in practice, user-defined function types are really useful. <strong>They allow functions to implement interfaces.</strong> The most common usage is for HTTP handlers. </p><p>An HTTP handler processes and HTTP server request. Based on the <a href="https://golang.org/pkg/net/http/#Handler">interface documentation</a>, it’s an interface with a method <code>ServeHttp</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Handler interface &#123;</span><br><span class="line">    ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Function type <code>http.HanderFunc</code> is an adapter to allow the use of ordinary functions as HTTP handlers. If f is a function with the appropriate signature, <code>HandlerFunc(f)</code> is a Handler that calls <code>f</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type HandlerFunc func(ResponseWriter, *Request)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ServeHTTP calls f(w, r).</span><br><span class="line">func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) &#123;</span><br><span class="line">f(w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Which means we can define a handler below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func handleGreeting(format string) http.HandlerFunc &#123;</span><br><span class="line">    return func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">        fmt.Fprintf(w, format, &quot;World&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is valid return type since the anonymous function’s signature and return type is the same as <code>http.HandlerFunc</code>, so we don’t need to explictly convert it. It’s the same as </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func handleGreeting(format string) http.HandlerFunc &#123;</span><br><span class="line">    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">        fmt.Fprintf(w, format, &quot;World&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Based on Golang’s &lt;a href=&quot;http://weekly.golang.org/doc/go_spec.html#Function_types&quot;&gt;function type&lt;/a&gt; spec:&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Golang" scheme="http://blog.beendless.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Async Ready Looping</title>
    <link href="http://blog.beendless.com/2020/10/26/JavaScript-Async-Ready-Looping/"/>
    <id>http://blog.beendless.com/2020/10/26/JavaScript-Async-Ready-Looping/</id>
    <published>2020-10-27T00:38:38.000Z</published>
    <updated>2020-10-27T00:58:36.249Z</updated>
    
    <content type="html"><![CDATA[<p>When you are following functional programming style guide to write JavaScript, you may find that it’s hard to deal with asynchronous since <code>async</code> function always return promises. So code like below will resolve the promises at same time instead of waiting for them. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(() &#x3D;&gt; &#123;</span><br><span class="line">    [1, 2, 3, 4].forEach(async (x) &#x3D;&gt; &#123;</span><br><span class="line">        await AsyncFunction(x);</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(&#39;Done&#39;); &#x2F;&#x2F; Run before the promises are resolved.</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>There are several different approaches to solve this problem. </p><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a><code>Promise.all</code></h3><p>You can simply take advantage of <code>Promise.all()</code> to create a promise out of an array of promises. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(() &#x3D;&gt; &#123;</span><br><span class="line">    await Promise.all([1, 2, 3, 4].map(async (x) &#x3D;&gt; AsyncFunction(x)));</span><br><span class="line">    console.log(&#39;Done&#39;); &#x2F;&#x2F; Run after all promises are resolved.</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="Use-Reduce-to-loop-over-async-calls-promise-chain"><a href="#Use-Reduce-to-loop-over-async-calls-promise-chain" class="headerlink" title="Use Reduce to loop over async calls [promise chain]"></a>Use <code>Reduce</code> to loop over async calls [promise chain]</h3><p>Since <code>async</code> calls return promises, we can emulate <code>forEach</code> with <code>reduce</code> by starting with a resolved promise and chaining ot it the promise for each value in the array. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(async () &#x3D;&gt; &#123;</span><br><span class="line">    await [1, 2, 3, 4].reduce((acc, item) &#x3D;&gt; acc.then(() &#x3D;&gt; AsyncFunction(item)), Promise.resolve());</span><br><span class="line">    console.log(&#39;Done&#39;); &#x2F;&#x2F; Run after all promises are resolved.</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When you are following functional programming style guide to write JavaScript, you may find that it’s hard to deal with asynchronous sinc</summary>
      
    
    
    
    
    <category term="Async" scheme="http://blog.beendless.com/tags/Async/"/>
    
    <category term="JavaScript" scheme="http://blog.beendless.com/tags/JavaScript/"/>
    
    <category term="Functional Programming" scheme="http://blog.beendless.com/tags/Functional-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Understand X-Forwarded-Proto</title>
    <link href="http://blog.beendless.com/2020/10/26/Understand-X-Forwarded-Proto/"/>
    <id>http://blog.beendless.com/2020/10/26/Understand-X-Forwarded-Proto/</id>
    <published>2020-10-27T00:13:24.000Z</published>
    <updated>2020-10-27T00:27:45.542Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP requests and HTTP responses use header fields to send information about the HTTP messages. Header fields are colon-separated name-value pairs that are separated by a carriage return (CR) and a line feed (LF). A standard set of HTTP header fields is defined in RFC 2616. There are also non-standard HTTP headers available that are widely used by the applications. Some of the non-standard HTTP headers have an X-Forwarded prefix. </p><p>The <code>X-Forwarded-Proto</code> request header helps you identify the protocol (HTTP or HTTPS) that a client used to connect to your servers. For example, if you host your website application behind a proxy server, let’s say AWS Loadbalancer. If there’s only one layer in front of the AWS load balancer, then the <code>X-Forwarded-Proto</code> value could be either <code>http</code> or <code>https</code> (it depends on how client connect to the load balancer). </p><p>Usually it won’t be an issue. But if you have multiple proxy servers in front of your application, for instance, user will have to go through CDN, WAF, Load balancer to hit your application, then the value of <code>X-Forwarded-Proto</code> depends on how the last two layers connect to each other instead of the protocal from client. Which means if user open the website with HTTPS mode, then you will have issue to set up the <code>secured cookie</code> in your HTTP response. </p><p>Here is an example, you set up an applicatio with ExpressJS under HTTPS model. In front your application, you have <code>Fastly</code>, <code>Imperva</code> and <code>AWS ALB</code>. Now if you are using <code>express-session</code> to set up your user session with below configuration:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxy: true,</span><br><span class="line">cookie: &#123;</span><br><span class="line">  secure: true,</span><br><span class="line">  httpOnly: true,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then if you rely on the default value of <code>X-Forwarded-Proto</code> from <code>AWS ALB</code>, you are not able to set up the session cookie. You have to either force <code>AWS ALB</code> to pass <code>X-Forwarded-Proto</code> as <code>HTTPS</code> or you can write a simple middleware to ignore the value from load balancer like below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* eslint-disable no-param-reassign *&#x2F;</span><br><span class="line">app.use((req, res, next) &#x3D;&gt; &#123;</span><br><span class="line">  req.headers[&#39;x-forwarded-proto&#39;] &#x3D; &#39;https&#39;;</span><br><span class="line">  return next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;HTTP requests and HTTP responses use header fields to send information about the HTTP messages. Header fields are colon-separated name-va</summary>
      
    
    
    
    
    <category term="HTTP" scheme="http://blog.beendless.com/tags/HTTP/"/>
    
    <category term="NodeJS" scheme="http://blog.beendless.com/tags/NodeJS/"/>
    
    <category term="AWS" scheme="http://blog.beendless.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>Serving Files on S3 through NodeJS</title>
    <link href="http://blog.beendless.com/2020/10/09/Serving%20Files%20on%20S3%20through%20NodeJS/"/>
    <id>http://blog.beendless.com/2020/10/09/Serving%20Files%20on%20S3%20through%20NodeJS/</id>
    <published>2020-10-10T03:06:56.000Z</published>
    <updated>2020-10-10T03:11:57.222Z</updated>
    
    <content type="html"><![CDATA[<p>NodeJS <code>stream</code> is one of the most powerful modules built-in. If you need to serve files on S3 through NodeJS service, a good idea is to leverage the compatibility of stream, especially if you want to serve big files.</p><p>One small trick here is you need to set up correct <code>Content-Type</code> before sending response back to the browser. Based on AWS’s documentation, <a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Request.html">https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Request.html</a>,  we can listen the event <code>httpHeaders</code> and set up the correct response header information.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const mime &#x3D; require(&#39;mime&#39;);</span><br><span class="line">const express &#x3D; require(&#39;express&#39;);</span><br><span class="line">const AWS &#x3D; require(&#39;aws-sdk&#39;);</span><br><span class="line">const AWSConfig &#x3D; require(&#39;aws-config&#39;);</span><br><span class="line">const S3 &#x3D; new AWS.S3(AWSConfig(&#123; region: AWS_REGION, accessKeyId: AWS_ACCESS_KEY_ID, secretAccessKey: AWS_SECRET_ACCESS_KEY &#125;));</span><br><span class="line"></span><br><span class="line">router.get(&#39;&#x2F;*&#39;, (req, res, next) &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; path &#125; &#x3D; req;</span><br><span class="line">  const contentType &#x3D; mime.getType(path);</span><br><span class="line">  return S3.getObject(&#123;</span><br><span class="line">    Bucket: AWS_BUCKET,</span><br><span class="line">    Key: path,</span><br><span class="line">  &#125;).on(&#39;httpHeaders&#39;, (code, headers) &#x3D;&gt; &#123;</span><br><span class="line">    if (code &lt; 300) &#123;</span><br><span class="line">      res.set(&#123;</span><br><span class="line">        &#39;Content-Type&#39;: contentType,</span><br><span class="line">        &#39;Content-Length&#39;: headers[&#39;content-length&#39;],</span><br><span class="line">        &#39;Last-Modified&#39;: headers[&#39;last-modified&#39;],</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">    .createReadStream()</span><br><span class="line">    .on(&#39;error&#39;, () &#x3D;&gt; next())</span><br><span class="line">    .pipe(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NodeJS &lt;code&gt;stream&lt;/code&gt; is one of the most powerful modules built-in. If you need to serve files on S3 through NodeJS service, a good </summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Async" scheme="http://blog.beendless.com/tags/Async/"/>
    
    <category term="NodeJS" scheme="http://blog.beendless.com/tags/NodeJS/"/>
    
    <category term="AWS" scheme="http://blog.beendless.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>Add WaterMark with JavaScript to Your Website</title>
    <link href="http://blog.beendless.com/2020/10/02/UsePureJSToAddWaterMarkForYourSite/"/>
    <id>http://blog.beendless.com/2020/10/02/UsePureJSToAddWaterMarkForYourSite/</id>
    <published>2020-10-02T18:14:22.000Z</published>
    <updated>2020-10-02T18:19:37.406Z</updated>
    
    <content type="html"><![CDATA[<p>If you are an enterprise application developer, you may want to add watermark to your application. You can use below JS to applications like Confluence, Jira and so on. Just need to paste below JS code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(function(txt1, txt2)&#123;</span><br><span class="line">    var canvas &#x3D; document.createElement(&#39;canvas&#39;);</span><br><span class="line">    var waterMark &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">    var body &#x3D; document.body;</span><br><span class="line">    canvas.width &#x3D; 250;</span><br><span class="line">    canvas.height &#x3D; 280;</span><br><span class="line">    canvas.style.display &#x3D; &#39;none&#39;;</span><br><span class="line">    body.appendChild(canvas);</span><br><span class="line"></span><br><span class="line">    var context &#x3D; canvas.getContext(&#39;2d&#39;);</span><br><span class="line">    context.rotate(-20 * Math.PI&#x2F;180);</span><br><span class="line">    context.font &#x3D; &#39;16px&#39;; </span><br><span class="line">    context.fillStyle &#x3D; &#39;rgba(17, 17, 17, 0.20)&#39;;</span><br><span class="line">    context.textAlign &#x3D; &#39;left&#39;; </span><br><span class="line">    context.textBaseline &#x3D; &#39;Middle&#39;;</span><br><span class="line">    context.fillText(txt1, canvas.width &#x2F; 3 - 40, canvas.height &#x2F; 2, 200);</span><br><span class="line">    context.fillText(txt2, canvas.width &#x2F; 3 - 40, canvas.height &#x2F; 2 + 30, 200);</span><br><span class="line">    waterMark.style.backgroundImage &#x3D; &#39;url(&#39; + canvas.toDataURL(&#39;image&#x2F;png&#39;) + &#39;)&#39;;</span><br><span class="line">    waterMark.style.zIndex &#x3D; 9999;</span><br><span class="line">    waterMark.style.height &#x3D; &#39;100vh&#39;;</span><br><span class="line">    waterMark.style.width &#x3D; &#39;100vw&#39;;</span><br><span class="line">    waterMark.style.pointerEvents &#x3D; &#39;none&#39;;</span><br><span class="line">    waterMark.style.position &#x3D; &#39;fixed&#39;;</span><br><span class="line">    body.prepend(waterMark);</span><br><span class="line">&#125;)(&#39;© Copyright 2020&#39;, &#39;All Rights Reserved&#39;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;If you are an enterprise application developer, you may want to add watermark to your application. You can use below JS to applications l</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="JavaScript" scheme="http://blog.beendless.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Computer Vision Tasks Summary</title>
    <link href="http://blog.beendless.com/2020/09/03/Computer-Vision-Tasks-Summary/"/>
    <id>http://blog.beendless.com/2020/09/03/Computer-Vision-Tasks-Summary/</id>
    <published>2020-09-03T20:06:56.000Z</published>
    <updated>2020-09-02T06:48:14.507Z</updated>
    
    <content type="html"><![CDATA[<p>I’m start reading this book &lt;Deep Learning with TensorFlow 2 and Keras&gt; those days, and will keep posting what I learnt from the book here.</p><p>There are several regular computer vision tasks when everyone start learning CNN. Such as <code>MINST</code>, <code>ImageNet</code> etc. But when you start applying what you learned to real projects, you may find more complex categories of computer vision use cases.</p><ul><li><p>Classification and localization</p><p>  Q: In this task, you have to report not only the class of object found in the image, but also the coordinates of the bounding box where the object appears in the image. The prerequisite for this type of problem is there’s only one target object in the image.</p><p>  A: This can be solved by using the architecture of one input with two output DNN. Basically we just need to have one more regression output beside the classical CNN classification output. Once we have the feature map from the CNN, we can feed it into a fully connected network which produces a vector of class probabilities (CNN Classification). Meahwhile, we can also feed the feature map to a fully connected network which will produce a vector (x, y, w, h) representing the top left x and y coordinates, width and height of the bounding box.  The loss function of the whole network can be determined by the combination of the classification loss (such as categorical cross entropy) with the regression loss (such as MAE).</p></li><li><p>Sematic segmentation</p><p>  Q: The target is to classify every ssingle pixel on the image as belonging to a single class.</p><p>  A: In practice, it’s expensive to build a feature map for each pixel and send that feature map through a fully connected network to predict the class of the pixel. The classical implementation will be a CNN encoder-decoder network. The encoder decreases the width and height of the image but increases its depth (number of features), while the decoder uses transposed convolution operations to increase its size and decrease depth. The input of this network is the image and the output is the segmentation map. A popular implementation of this encoder-decoder architecture is the <a href="https://github.com/jakeret/tf_unet">U-Net</a>.</p></li><li><p>Object detection</p><p>  Q: It’s a more complicated version of classification and localization. The difference is now there are multiple objects in the image and for each one we need to find the class and bounding box coordinates. In addition, neither the number of objects nor their size is known in advance. </p><p>  A: In practice, we would use a tool like <code>Selective Search</code> to preprocess the images and find areas in the image that might contain objects. Those regions are called <code>Region Proposals</code>, and the network to detect them was called <code>Region Proposal Network</code> (<code>R-CNN</code>). There’s a better improved version called <a href="https://github.com/tensorpack/tensorpack/tree/master/examples/FasterRCNN">Faster R-CNN</a> which use a trainable network <code>Region Proposal Network (RPN)</code> to get the regions. The entire image is fed through the CNN and the region proposals are projected onto the resulting feature map. Each region of interest is fed through and <code>Region of Interest (ROI)</code> pooling layer and then to a fully connected network, which produces a feature vector for the ROI. ROI pooling is a widely used operation in object detection tasks using CNN. The ROI pooling layer uses max pooling to convert the features inside any valid region of interest into a small feature map with a fixed spatial extent of H × W (where H and W are two hyperparameters). The feature vector is then fed into two fully connected networks, one to predict the class of the ROI and the other to correct the bounding box coordinates for the proposal.</p></li><li><p>Instance segmentation</p><p>  Q: It needs to distinguish between different instances of the same class in an image. It is not required to label every single pixel in the image, but we need to find a binary mask that covers each object.</p><p>  A: Google’s <a href="https://colab.research.google.com/github/tensorflow/tpu/blob/master/models/official/mask_rcnn/mask_rcnn_demo.ipynb">Mask R-CNN</a> and <a href="https://colab.research.google.com/github/tensorflow/models/blob/master/research/deeplab/deeplab_demo.ipynb#scrollTo=edGukUHXyymr">DeepLab</a></p></li><li><p>Video processing</p><p>  3D Convnets are pretty expensive to train. So in practice, there are three ways to train video related datasets:</p><ol><li><p>Use pretrained CNNs to extract all features, then pass the feature maps into an RNN, which will learn sequences across multiple frames and emit the final classification.</p></li><li><p>Similar like #1 but the final layer is an MLP instead off an RNN.</p></li><li><p>Use a 3D CNN to extracts spatial and visual features. Then pass the extracted features inot either an RNN or MLP.</p></li></ol></li><li><p>Textual documents</p><p>  For some special NLP problems like sentiment analysis, which the words spatial information is not important, we can use CNN to preprocess the text.</p></li><li><p>Audio &amp; Music</p><p>  Each digital sound we hear is based on 16,000 samples per second (sometimes 48,000 or more) and building a predictive model where we learn to reproduce a sample based on all the previous ones is a very difficult challenge.</p><p>  <a href="https://deepmind.com/blog/wavenet-generative-model-raw-audio/">WaveNet</a> released by DeepMind improved the Text-to-Speech(TTS) system significantly.</p><ul><li><p>Concatenative  TTS is where single speech voice fragments are first memorized and then recombined when the voice has to be reproduced. However, this approach does not scale because it is possible to reproduce only the memorized voice fragments, and it is not possible to reproduce new speakers or different types of audio without memorizing the fragments from the beginning.</p></li><li><p>Parametric TTS is where a model is created for storing all the characteristic features of the audio to be synthesized. Before WaveNet, the audio generated with parametric TTS was less natural than concatenative TTS. WaveNet enabled significant improvement by modeling directly the production of audio sounds, instead of using intermediate signal processing algorithms as in the past.</p><p>There are two famous implementations of the WaveNet. <a href="https://github.com/ibab/tensorflow-wavenet">https://github.com/ibab/tensorflow-wavenet</a> and <a href="https://magenta.tensorflow.org/nsynth">https://magenta.tensorflow.org/nsynth</a> (<a href="https://colab.research.google.com/notebooks/magenta/nsynth/nsynth.ipynb">https://colab.research.google.com/notebooks/magenta/nsynth/nsynth.ipynb</a>)</p><p><a href="https://openai.com/blog/musenet/">MuseNet</a> released by OpenAI is another audio generation tool.</p></li></ul></li><li><p>Capsule networks</p><p>  The pooling layer in CNN introduces a significant problem because if forces to loss all the positional data (spatial relationships between pixels).</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I’m start reading this book &amp;lt;Deep Learning with TensorFlow 2 and Keras&amp;gt; those days, and will keep posting what I learnt from the bo</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Machine Learning" scheme="http://blog.beendless.com/tags/Machine-Learning/"/>
    
    <category term="CNN" scheme="http://blog.beendless.com/tags/CNN/"/>
    
    <category term="Deep Learning with TensorFlow 2 and Keras" scheme="http://blog.beendless.com/tags/Deep-Learning-with-TensorFlow-2-and-Keras/"/>
    
  </entry>
  
  <entry>
    <title>Loading Image to Google Colab Notebooks</title>
    <link href="http://blog.beendless.com/2020/08/31/Loading%20Image%20to%20Google%20Colab%20Notebooks/"/>
    <id>http://blog.beendless.com/2020/08/31/Loading%20Image%20to%20Google%20Colab%20Notebooks/</id>
    <published>2020-09-01T06:24:48.000Z</published>
    <updated>2020-10-02T18:18:56.105Z</updated>
    
    <content type="html"><![CDATA[<p>Google Colab is one of the best place to start your Machine Learning. Sometime you may want to upload images to the notebooks from your local. Fortunately you can easily make it done throught the built-in API.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> files</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">uploaded_files = files.upload()</span><br><span class="line"></span><br><span class="line">images =  &#123;fname: plt.imread(BytesIO(fbinary)) <span class="keyword">for</span> fname, fbinary <span class="keyword">in</span> uploaded_files.items()&#125;</span><br></pre></td></tr></table></figure><p>If you are using Keras, you can also read the uploaded file and convert it to a Numpy array with built-in helper functions.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> load_img, img_to_array</span><br><span class="line">TARGET_SIZE = <span class="number">256</span></span><br><span class="line">images = &#123;fname: img_to_array(load_img(fname, target_size=(TARGET_SIZE, TARGET_SIZE))）<span class="keyword">for</span> fname <span class="keyword">in</span> uploaded_files.keys()&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Google Colab is one of the best place to start your Machine Learning. Sometime you may want to upload images to the notebooks from your l</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Machine Learning" scheme="http://blog.beendless.com/tags/Machine-Learning/"/>
    
    <category term="Google Colab" scheme="http://blog.beendless.com/tags/Google-Colab/"/>
    
  </entry>
  
  <entry>
    <title>Building Asynchronized HTTP Services With Sanic</title>
    <link href="http://blog.beendless.com/2019/01/03/Building-Asynchronized-HTTP-Services-With-Sanic/"/>
    <id>http://blog.beendless.com/2019/01/03/Building-Asynchronized-HTTP-Services-With-Sanic/</id>
    <published>2019-01-03T21:06:56.000Z</published>
    <updated>2020-09-01T05:45:05.611Z</updated>
    
    <content type="html"><![CDATA[<p>Python introduced async/await syntax from Python3.5. it makes your code non-blocking and speedy. Developers can use it to build a high-performance / NIO web services like NodeJS. Most of the Python web developers are familiar with Flask. But unfortunately flask has no plan to support the async request headers. <a href="https://sanicframework.org/">Sanic</a> is a Flask-like webserver that’s written to go fast. It was inspired by <a href="https://magic.io/blog/uvloop-blazing-fast-python-networking/">uvloop</a>. </p><p>I set up a <a href="https://github.com/blessdyb/sanicboilerplate">sanic boilerplate</a> to show how to set up a sanic application. Inside of this project:</p><ul><li><code>Dockerfile</code> and <code>docker-compose.yml</code> are used to set up the python environments</li><li><code>gunicorn</code> is the application server</li><li><code>Blueprint</code> is used to build different parts of the applications (health-check / docs / business logic samples)</li><li>Eventloop is based on <code>asyncio</code> and <code>uvloop</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python introduced async/await syntax from Python3.5. it makes your code non-blocking and speedy. Developers can use it to build a high-pe</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Python" scheme="http://blog.beendless.com/tags/Python/"/>
    
    <category term="Async" scheme="http://blog.beendless.com/tags/Async/"/>
    
    <category term="HTTP" scheme="http://blog.beendless.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Several Important Concepts of CNN</title>
    <link href="http://blog.beendless.com/2019/01/01/Several-Important-Concetps-of-CNN/"/>
    <id>http://blog.beendless.com/2019/01/01/Several-Important-Concetps-of-CNN/</id>
    <published>2019-01-02T00:49:25.000Z</published>
    <updated>2020-09-01T05:45:05.614Z</updated>
    
    <content type="html"><![CDATA[<p>A trained convolutional layer is made up of many feature detectors, called filters, which slide over an input image tensor as a moving window. This is a very powerful technique and it possesses several advantages over the <code>flatten</code> and <code>classify</code> method or deep learning.</p><p>Below are some notes coming from <code>Deep Learning Quick Reference</code>.</p><h3 id="Convolutional-Layer"><a href="#Convolutional-Layer" class="headerlink" title="Convolutional Layer"></a>Convolutional Layer</h3><p>During the computation between the input and each filter, we take the elementwise product across all axes. So in the end, we will still leave with a two-dimensional output.</p><p>In a convolution layer, each unit is a filter, combined with a nonlinearity.</p><p><em>Technically, this is not a convolution, but a cross-correlation. We call it a convolution by convention and the difference for our purposes is really quite small.</em></p><h3 id="Benefits-of-Convolutional-Layers"><a href="#Benefits-of-Convolutional-Layers" class="headerlink" title="Benefits of Convolutional Layers"></a>Benefits of Convolutional Layers</h3><p>Obviously, a convolutional layer requires much fewer parameters.</p><ul><li><p>Parameter sharing</p><p>  Because the filter is used across the entire image, filters learn to detect the features regardless of their position within the image. This turns out to be really useful as it gives us <a href="https://www.quora.com/How-is-a-convolutional-neural-network-able-to-learn-invariant-features?from=timeline&isappinstalled=0">translation invariance</a>, which means we can detect something important regardless of its orientation in the overall image.</p></li><li><p>Local connectivity<br>  Because of the fixed size, filters focus on connectivity between adjacent pixels. It means that they will most strongly learn local features. The stacking of localized features is really desirable and a key reason why convolutional layers are so great.</p></li></ul><h3 id="Pooling-Layers"><a href="#Pooling-Layers" class="headerlink" title="Pooling Layers"></a>Pooling Layers</h3><p>Pooling layers are used to reduce the dimensionality of convolutional network as layers of convolutions are added, which reduces overfitting. They have the added benefit of making the feature detectors somewhat more robust. In other words, it helps us to focus on the stronger signal or the major signal instead of the details.</p><h3 id="Batch-Normalization"><a href="#Batch-Normalization" class="headerlink" title="Batch Normalization"></a>Batch Normalization</h3><p>Batch normalization helps our networks perform better overall and learn faster. It is also fairly easy to understand in an application. When using batch normalization, for each minibatch, we can normalize that batch to have a mean of 0 and unit variance, after (or before) each nonlinearity. This allows each layer to have a normalized input to learn from, which makes that layer more efficient at learning.</p><h3 id="Data-Augmentation"><a href="#Data-Augmentation" class="headerlink" title="Data Augmentation"></a>Data Augmentation</h3><p>The more data you have, the better your deep learning model could be success. But what if you can’t have enough data to feed to your model? Data augmentation can help you to improve your model to a certain extent.</p><ul><li><p>Adding Noise</p><p>  When adding noise, make sure you don’t introduce extra bias to the dataset. Also you need to ensure the noise is independent.</p></li><li><p>Transformation</p><p>  When doing transformation (flip/shift/rotate), make sure you don’t introduce bias to the feature =&gt; label mappings. For example, you can verticle flip the MNIST dataset.</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;A trained convolutional layer is made up of many feature detectors, called filters, which slide over an input image tensor as a moving wi</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Deep Learning" scheme="http://blog.beendless.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Tips for Hyperparameter Optimization</title>
    <link href="http://blog.beendless.com/2019/01/01/Tips-for-Hyperparameter-Optimization/"/>
    <id>http://blog.beendless.com/2019/01/01/Tips-for-Hyperparameter-Optimization/</id>
    <published>2019-01-01T08:29:29.000Z</published>
    <updated>2020-09-01T05:45:05.615Z</updated>
    
    <content type="html"><![CDATA[<p>One of the biggest headaches of using deep neural networks is that they have tons of hyperparameters that should be optimized so that the network performs optimally.  Below are some notes coming from <code>Deep Learning Quick Reference</code>.</p><ul><li><p>Try to Find some similar solved problem.</p></li><li><p>Keep adding layers/nodes until the network gets overfitting.</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The bad thing becomes a good thing to help us confirm that the network can fit the training sets perfectly at least.</span><br></pre></td></tr></table></figure></li></ul><h2 id="Hyperparameters"><a href="#Hyperparameters" class="headerlink" title="Hyperparameters"></a>Hyperparameters</h2><ul><li><p>Optimizer</p><p>  Usually, you can start with <code>Adam</code>, but an <code>RMSProp</code> or a fine-tuned <code>SGD</code> may do a better job. You will need to tune the learning rate, momentum, decay and so on.</p></li><li><p>Network Weight Initialization</p><p>  You can start with <code>he_normal</code> or <code>he_uniform</code>.</p></li><li><p>Neuron Activation</p><p>  In most cases, <code>relu</code> is the first one you need to use. But you should try <code>leaky-relu</code> or <code>tanh</code> if needed.</p></li><li><p>Regularization</p><ul><li>Dropout probability</li><li>L2 regularization</li></ul></li><li><p>Batch size</p></li></ul><p>All of the combinations of the methods above you may need to try to get an optimized result, below are the common strategies:</p><ul><li>Grid search</li><li>Random search</li><li>Bayesian optimization</li><li>Genetic algorithms</li><li>Hyperband</li></ul><p>From the author, J. Malia Andrus:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ultimately, hyperparameter search is an economics problem, and the first part of any hyperparameter search should be a consideration for your budget of computation time, and personal time, in attempting to isolate the best hyperparameter configuration.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;One of the biggest headaches of using deep neural networks is that they have tons of hyperparameters that should be optimized so that the</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Deep Learning" scheme="http://blog.beendless.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Started to go through convnetjs</title>
    <link href="http://blog.beendless.com/2018/12/23/Started-to-go-through-convnetjs/"/>
    <id>http://blog.beendless.com/2018/12/23/Started-to-go-through-convnetjs/</id>
    <published>2018-12-23T09:15:19.000Z</published>
    <updated>2020-09-01T05:45:05.614Z</updated>
    
    <content type="html"><![CDATA[<p>After reading several books about deep learning, now I can use <code>keras</code> / <code>tensorflow</code> to train some models, but the mathmatical implementations behind the libraries are still have to follow. </p><p>Two years ago, when I played with <code>Karpathy</code>‘s [ConvnetJS], I was shocked by the agrighms behind that. I think now it’s time to go through his code, I started a small project to annotate <code>ConvnetJS</code> source code and re-write it with <code>TypeScript</code>.  You can check my progress from <a href="https://github.com/blessdyb/convnetjs-source">ConvnetJS Source Annotation</a>, you can also check the <a href="https://convnetjs.beendless.com/">documentation</a> directly.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;After reading several books about deep learning, now I can use &lt;code&gt;keras&lt;/code&gt; / &lt;code&gt;tensorflow&lt;/code&gt; to train some models, but the</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Deep Learning" scheme="http://blog.beendless.com/tags/Deep-Learning/"/>
    
    <category term="JavaScript" scheme="http://blog.beendless.com/tags/JavaScript/"/>
    
    <category term="ConvnetJS" scheme="http://blog.beendless.com/tags/ConvnetJS/"/>
    
  </entry>
  
  <entry>
    <title>Scaling NodeJS Apps -- Archtectural Patterns</title>
    <link href="http://blog.beendless.com/2018/12/20/Scaling-NodeJS-Apps-Archetectural-Patterns/"/>
    <id>http://blog.beendless.com/2018/12/20/Scaling-NodeJS-Apps-Archetectural-Patterns/</id>
    <published>2018-12-21T07:00:00.000Z</published>
    <updated>2020-09-01T05:45:05.612Z</updated>
    
    <content type="html"><![CDATA[<p>This is the notes when I read the book <a href="https://www.apress.com/de/book/9781484239902">Scaling Your Nodej.js Apps</a>.</p><h2 id="Layered-Architecture"><a href="#Layered-Architecture" class="headerlink" title="Layered Architecture"></a>Layered Architecture</h2><p>It is based on the logistic seperation of concerns of your application (or platform) into layers. And the layers must comply with the following points:</p><ul><li>Each layer must have a well-defined purpose (presentation layer, business layer, and so on)</li><li>Each layer cannot speak (or send data) to any other layer that is not the one directly below it</li></ul><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>Many web frameworks have adopted this pattern, because the structure of most web projects resembles this approach. </p><ul><li>MVP (Model, View, Presenter) pattern aims to remove that unwanted interaction between Model and View, making Presenter the sole man-in-the-middle talking care of passing information between its associated View and it’s Model.</li><li>MVVM (Model, View, ViewModel) aims for a two-way data binding between the View and ViewModel. This is in turns allows for automatic updates on the view, based on changes in the model.</li></ul><h2 id="Client-Server"><a href="#Client-Server" class="headerlink" title="Client-Server"></a>Client-Server</h2><p>It consists of having a powerful server that provides meaningful services to many clients.</p><ul><li>Clients always start the data communication.</li><li>The servers are always listening for new connections from clients to start a new communcation.</li></ul><h2 id="Master-Slave"><a href="#Master-Slave" class="headerlink" title="Master-Slave"></a>Master-Slave</h2><p>It implies a single channel of communication between two parties. Instead of having one centralized hub for the business logic and heavy processing of data, you have a one-way controlled communication between a controlling node (the master) and many decentralized nodes (the slaves). The heavy processing and expensive tasks are usually performed in the slaves, while the master merely funnels the requests from outside into them. </p><ul><li>Any behavior-affecting message are one-way, from the master to the slaves. Slaves don’t have the ability to affect the master.</li><li>Not all slaves need to work on the same tasks.</li><li>Some versions of this partern allow slaves to elect one of their own as a new master, if the current master is no longer working.</li></ul><p>It can be used for database architecture, increased parallel processing capacity, and so on.</p><h2 id="Event-Bus-or-Event-Driven-Architectures"><a href="#Event-Bus-or-Event-Driven-Architectures" class="headerlink" title="Event-Bus or Event-Driven Architectures"></a>Event-Bus or Event-Driven Architectures</h2><p>The relationships between components are usually many-to-many. The components can be defined as follows:</p><ul><li>Event sources: these are the components that generate events and publish them into the event bus.</li><li>Event consumers: the consumers are the components that are expecting a particular set of events and are ready to react to them once received.</li><li>Event bus: the channel through which the events will be districuted.</li><li>The actual event: the data cummunicated between different components.</li></ul><p>A classic example of this approach consists of using a message queue as the event bus. There are lots of solutions like RabbitMQ, Kafka, ZeroMQ. The event bus and event-driven reactions are all asynchronous. So you platform must be able to function asynchronously.</p><h2 id="Microservices-Architecture"><a href="#Microservices-Architecture" class="headerlink" title="Microservices Architecture"></a>Microservices Architecture</h2><p>The core behind this pattern is your understanding of the different features your platform is supposed to have (that is, the different services it needs to provide). If you properly understand your platform, you can probably split the services into a set of smaller services that, when used together by the client app, yield the same result you would get from a single block of code with all features bundle together. With a microservice-based architecture, we get control of our services in a fine granularity level.</p><ul><li>Gain total control over which component of your application to scale.</li><li>Improve the development process.</li><li>Add the ability to switch versions of your components.</li><li>Gain the ability to reuse components or modules among applications.</li></ul><p>Below are some of the most common issues you might run into which developing microservices:</p><ul><li>Communications between difference micro-services need to be planned and defined carefully and clearly, otherwise, the whole performance of the system will be affected, especially when you get the high traffic.</li><li>Too many microservices might create a chaotic architecture.</li><li>Deployments of microservices-based architecture can be quite a pain, especially if you are not properly automating the process.</li></ul><h2 id="The-Broker-Pattern"><a href="#The-Broker-Pattern" class="headerlink" title="The Broker Pattern"></a>The Broker Pattern</h2><p>One of the pain points for the latter was that given a high enough number of microservices, you begin to need a form of orchestration; otherwise, your clients start to lose the ability to communicate easily with your platform.</p><p>The purpose of the broken node is to centralize and redistribute requests among different services. Another key characteristic of this pattern is that by default it is not the broken that “knows” about its servers; instead, it’s the servers that register with the borker once they come online, and provide all the information it needs to understand the services they provide.</p><p>This pattern has a few setbacks:</p><ul><li>The broker becomes the single point of failure.</li><li>It’s hard to scale your platform unless you also scale up your broker</li><li>It adds an extra layer of indirection between client and services; thus extra latency is added to the request time.</li></ul><h2 id="Lambda-Architectures"><a href="#Lambda-Architectures" class="headerlink" title="Lambda Architectures"></a>Lambda Architectures</h2><p>Lambda architecutres are a special pattern designed to provide a high-throughput platform that is able to process very large quantities of data both in real time and in batches.</p><p>This is a solution that has a very high maintenance cost associated with it since you basically are maintaining two parallel architecture at once, which in ture need to keep a centralized repository of data in a synchronized matter.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This is the notes when I read the book &lt;a href=&quot;https://www.apress.com/de/book/9781484239902&quot;&gt;Scaling Your Nodej.js Apps&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="DevOps" scheme="http://blog.beendless.com/tags/DevOps/"/>
    
    <category term="NodeJS" scheme="http://blog.beendless.com/tags/NodeJS/"/>
    
    <category term="Archetecture" scheme="http://blog.beendless.com/tags/Archetecture/"/>
    
  </entry>
  
  <entry>
    <title>Scaling NodeJS Apps -- The Need to Scale</title>
    <link href="http://blog.beendless.com/2018/12/20/Scaling-NodeJS-Apps/"/>
    <id>http://blog.beendless.com/2018/12/20/Scaling-NodeJS-Apps/</id>
    <published>2018-12-20T09:26:16.000Z</published>
    <updated>2020-09-01T05:45:05.613Z</updated>
    
    <content type="html"><![CDATA[<p>This is the notes when I read the book <a href="https://www.apress.com/de/book/9781484239902">Scaling Your Nodej.js Apps</a>.</p><p>An increasing in incoming traffic could affect your system in different ways; we can describe these as direct or indirect.</p><ul><li><p>Direct Effects</p><p>  Overloading your server’s capacity to handle incoming traffic is the most obivous direct effects.</p><ul><li>Apache Httpd spawns a new process for every request, so multiple concurrent requests might cause this scenario to get out of hand quickly.</li><li>Nginx has a non-blocking I/O approach, so it’s capable of managing high levels of traffic with constant memory consumption.</li></ul></li><li><p>Indirect Effects</p><p>  An increasing in traffic can affect your application indirectly by overloading one of your internal processes. In a microservices-based architecture, the communication between services needs to be carefully planned. The fact that your’re capable of handling the increased traffic on your user-facing service doesn’t mean the rest of your architecture will be able to handle it. Whenever you depend on third-party services, they can actually assure you that their service will not be degraded by anything.</p></li><li><p>High Availability</p><p>  It must ensure that whatever service it provides will always be available and will not lose performance, despite having internal problems. The availability of a system is known as it’s <code>uptime</code> or <code>SLA</code>(Service Level Agreement) which is measured in nines of availability.<br>  A common way to approach the high HA is to use master/slave design for each node. The monitor service will guarantee that all our nodes are working well. If one of the nodes fails, its slave node would be promoted as the new master node and replace the bad one. It works good if you can simply exchange the master node with slave node without any loss of data or any kind of information. For database nodes, we have to introduce the passive data replication process between maseter nodes and slave nodes. It can make sure at any point if your master gets lot, the slave will take over the responsibility with minimal side-effects (data lose). One thing you need to keep in mind that you can’t prevent the master node goes down during the mid-write process, so we need to enable the data transaction</p><ul><li>Redis with sentinel enabled, the slaves are not just there waiting to be promoted, they are used for read-only queries as well. So the slaves will take care of all the write operations.</li><li>MongoDB has replica sets. It allows us to set a group of nodes with one of them as the primary node     </li></ul></li></ul><ul><li><p>Fault Tolerance</p><p>  High availability is all about keeping the offline time of your platform to a minimum and always trying to keep performance unaffected. The most important difference between these two is that if an error occurs during an action, a high available system does not ensure the correct end state of that action, while a fault-tolerant one does. This distinction is crucial because it will be the key to understanding which approach you will want to implement for your particular use case.</p><p>  Usually fault-tolerant systems try to catch the error at its source and find a solution before it becomes critical. </p><ul><li><p>Redundancy</p><p>  We have one or more components performing the same task and some form of checking logic to determine when one of them is has failed and its output needs to be ignored. It’s a very common practice for mission-critical components.</p><ul><li><p>Triple Modular Redundancy<br>  <code>TMR</code> is a form of redundancy in which three systems perform the same process and their results are checked by a majority voting system that in turn produces a single output.</p></li><li><p>Forward Error Correction<br>  <code>FEC</code> adds redundancy into the message itself. The receiver can verify the actual data and correct a limited number of detected errors caused by noisy or unstable channels. </p></li></ul></li><li><p>Checkingpoint</p><p>  This technique consists of saving the current state of the system into reliable storage and restarting the system by preloading that saved state whenever there is a problem.</p><p>  For distributed system, when one of nodes recovers from a checkingpoint, the other nodes need to ensure that their current state is consistant. This is a bit complex because there is usually a dependency between nodes, so the solution here is to force the system to return to the only common stable state: its original checkpoint.</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This is the notes when I read the book &lt;a href=&quot;https://www.apress.com/de/book/9781484239902&quot;&gt;Scaling Your Nodej.js Apps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An i</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="DevOps" scheme="http://blog.beendless.com/tags/DevOps/"/>
    
    <category term="NodeJS" scheme="http://blog.beendless.com/tags/NodeJS/"/>
    
    <category term="Archetecture" scheme="http://blog.beendless.com/tags/Archetecture/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 机器学习之分类与聚合算法</title>
    <link href="http://blog.beendless.com/2018/12/18/JavaScript-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%86%E7%B1%BB%E4%B8%8E%E8%81%9A%E5%90%88%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.beendless.com/2018/12/18/JavaScript-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%86%E7%B1%BB%E4%B8%8E%E8%81%9A%E5%90%88%E7%AE%97%E6%B3%95/</id>
    <published>2018-12-19T06:11:32.000Z</published>
    <updated>2020-09-01T05:45:05.611Z</updated>
    
    <content type="html"><![CDATA[<p>聚类是接触无监督式学习时常见的一个问题。通常在你想将一个大的数据集重新编排组织成小的群组，或者是将其按逻辑相似性分解成小的群组时我们会考虑聚类。例如，你可以尝试将人口普查数据中的家庭收入分成三个群组：低收入，中等收入及高收入。如果你将家庭收的数据集做为指定的一种聚类算法的输入，你将期望得到三个数据聚点 及其对应的前述三个收入分组的平均值做为结果。即使是这种家庭收入数据的一维聚类问题，你也可能很难通过手动解决——难点在于无法快速地确定两个分组之间的边界值。你可能可以参考政府部门所定义的收入分组的标准，但无法确定这类定义的标准是几何均衡的; 这类的标准可能是被政策制定者所发明出来的，因此它可能无法精确地表达数据之间的正真关系。</p><p>一个聚类是一组逻辑上存在某种相似性的数据点的集合。 他们可能是具有相同的行为的用户组，具有相似收入水平的居民，具有相似颜色的像素点的组合等等. K-平均聚类算法是一种数值和几何量化算法，因此它所生成的聚类所包含的点在数值上是相近的，在几何上也是彼此相近的。庆幸的是，大多数的数据集都是可以数值化的，因为K-平均聚类算法可适用于多种领域的问题。</p><p>K-均值算法是一个对于量化数据集而言快速，强大并广受欢迎的算法。它的名称来源于两部分：K表达了我们想要算法查找的聚类的个数，均值意味着确定这些聚类中心点的方式(你可以使用诸如K-中位数或K-众数等）。例如，我们设计了一个查找到三个代表整个数据集所有数据点的位置均值的聚类中心的算法，在此算法中，K=3 同时我们使用了K-均值分析的方式来确定聚类中心点的位置。</p><p>K-均值算法是一个迭代算法，这意味着它将在循环中来持续性地更新算法模型，直到模型处于某种稳定状态后才会退出循环并返回模型做为结果。如果更加形象具体地描述，K-均值算法的具体内容是：将你所要分析的所有的数据点绘制在其所对应的空间中，并选取一个K值。你必须在此能够明确地知道K的值，或者至少能够知道K的一个合理的取值范围(在这一节之后我们会给出如何处理这种情况)。之后随机生成K个数据点（如果K=5，生成五个数据点）并将其绘制在对应的空间内；这些点也被称为”重心聚点”，因为它们实质上代表的是聚类数据集的几何中心 。针对数据集空间的所有点，找到离这些点各自几何距离最新的数据重心聚点并将其连接或分配给这些数据点。一时所有的数据点都链接或分配到了数据重心聚点，此时再依次遍历所有的重心聚点并将其位置更新为与其连接或分配到其的所有数据点的平均位置。重复上述分配-更新的过程理直到所有的重心聚点的位置不在变化;这些重心聚点的最终位置即是聚类算法的输出，同时它们也是整个数据集在聚类操作后的分组聚点。上述的过程比较抽象，如果你感觉到很难理解，不要担心，接下来在我们设计并实现整个算法的过程中，我们会更加深入地对其加以示例进行介绍。</p><p>在这一章中，我们将首先讨论均值及距离的概念及及如何将它们应用到K-均值算法之中。之后我们将剖析算法的细节，并完全使用JavaScript来实现K-均值算法。接下来我们将使用多个不同的简单数据集来测试我们所实现的K-均值算法，同时讨论如何处理K未知的问题。我们将创建一个小的工具来自动化地确定K的值。基于以上知识，我们会分析K-均值算法中损失函数的概念，通过设计并实现一个损失函数来帮我们实现优化算法的目标。 以下是几个主要话题:</p><ul><li>均值与距离</li><li>实现K-均值算法</li><li>示例一: 如何使用K-均值算法来处理二维数据</li><li>示例二: 如何使用K-均值算法来处理三维数据</li><li>K-均值算法当K未知时如何处理</li></ul><h2 id="均值和距离"><a href="#均值和距离" class="headerlink" title="均值和距离"></a>均值和距离</h2><p>K-均值算法的运行依赖于两个概念：均值和距离。为了计算出某个聚点中心的位置，算法需要计算所有连接到该数聚点中心所有数据点的平均值。这种情况下，我们会使用算术均值，即所有数据点的数值的和除以数据点的个数来得到这个均值。在ES5/标准JavaScript中,  我们可以创建如下函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**  </span><br><span class="line"> * @param &#123;Array.&lt;number&gt;&#125; 数值  </span><br><span class="line"> * @return &#123;float&#125;  </span><br><span class="line"> *&#x2F;</span><br><span class="line"> function mean(numbers) &#123;  </span><br><span class="line">    var sum &#x3D; 0, length &#x3D; numbers.length;</span><br><span class="line">    if (length &#x3D;&#x3D;&#x3D; 0) &#123;  </span><br><span class="line">        &#x2F;** 在数学定义中，一个空的数据集的均值是undefined,所以我们应该尽早地检测 </span><br><span class="line">         *  到这种情况并中断执行。同时我们也应该允许函数试图计算0&#x2F;0, 在JavaScript</span><br><span class="line">         *  中会返回NaN，但在一些其它语言中会抛出异常。为了不让函数在此能够处理多种</span><br><span class="line">         *  情况，我们在此直接抛出异常，而不是返回一个混合类型的值</span><br><span class="line">         * &#x2F;</span><br><span class="line">         throw new Error(&#39;Cannot calculate mean of empty set&#39;);  </span><br><span class="line">    &#125;  </span><br><span class="line">    for (var i &#x3D; 0; i &lt; length; i++) &#123;  </span><br><span class="line">        sum +&#x3D; numbers[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">    return sum &#x2F; length;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ES6中，我们可以通过使用箭头函数来得到一个更为简练的表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const mean &#x3D; numbers &#x3D;&gt; numbers.reduce((sum, val) &#x3D;&gt; sum + val, 0) &#x2F; numbers.length;</span><br></pre></td></tr></table></figure><p>然而上述的代码预设了所有的参数都是已定义好的数值，如果你在调用函数的过程中使用了一个空的数组，它将返回NaN。为了便于理解，我们还可以让上面的代码分解为两个步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const sum &#x3D; (numbers) &#x3D;&gt; numbers.reduce((sum, val) &#x3D;&gt; sum + val, 0);  </span><br><span class="line">const mean &#x3D; (numbers) &#x3D;&gt; sum(numbers) &#x2F; numbers.length;</span><br></pre></td></tr></table></figure><p>在此需要注意，我们可以使用任何形式的均值计算方式，包括中位数或众数。实际上，通常我们更倾向于使用K-中位数而不是K-均值。中位数在过滤数据集异常值方面比平均值更能得到更好的结果。因为你在使用过程中要提醒自己哪种均值的计算方式是你所需要的。如果你想要的是一个能够表达所有被消费的资源总数的方法，你可以使用算术平均值。如果你推测到数据集中的异常数据是由于错误的数据收集测量方式导致并且可以忽略的话，K-中数位可能更适合你的计算方式。</p><p>我们同时需要一个计算距离的算法。它可以使用任何一种测量距离的方式，但是，对于数值数据而言，我们更多地还是使用典型的欧几里德距离——你在高中时候学过的标准两点距离计算方式——使用ES5的话它的实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**  </span><br><span class="line"> * 计算二维数据点a和b之间的距离</span><br><span class="line"> * 每个点应该是一个长度为2的数组，数组的每个数据成员都是数值类型</span><br><span class="line"> * @param &#123;Array.number&#125; a  </span><br><span class="line"> * @param &#123;Array.number&#125; b  </span><br><span class="line"> * @return &#123;float&#125;  </span><br><span class="line"> *&#x2F;</span><br><span class="line"> function distance2d(a, b) &#123;  </span><br><span class="line">     var diff_0 &#x3D; b[0] - a[0];  </span><br><span class="line">     var diff_1 &#x3D; b[1] - a[1];  </span><br><span class="line">     return Math.sqrt(diff_0*diff_0 + diff_1*diff_1);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但实际使用中我们需要支持多维数据，因为可以将上述的实现扩展为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**  </span><br><span class="line"> * @param &#123;Array.number&#125; a  </span><br><span class="line"> * @param &#123;Array.number&#125; b  </span><br><span class="line"> * @return &#123;float&#125;  </span><br><span class="line"> *&#x2F;function distance(a, b) &#123;  </span><br><span class="line">    var length &#x3D; a.length,  </span><br><span class="line">        sumOfSquares &#x3D; 0;  </span><br><span class="line">  </span><br><span class="line">    if (length !&#x3D;&#x3D; b.length) &#123;  </span><br><span class="line">        throw new Error(&#39;Points a and b must be the same length&#39;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    for (var i &#x3D; 0; i &lt; length; i++) &#123;  </span><br><span class="line">        var diff &#x3D; b[i] - a[i];  </span><br><span class="line">        sumOfSquares +&#x3D; diff*diff;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    return Math.sqrt(sumOfSquares);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用ES6的话我们可以简化上述的代码为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const distance &#x3D; (a, b) &#x3D;&gt; Math.sqrt(  </span><br><span class="line">    a.map((aPoint, i) &#x3D;&gt; b[i] - aPoint)  </span><br><span class="line">     .reduce((sumOfSquares, diff) &#x3D;&gt; sumOfSquares + (diff*diff), 0)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在装备了以上两个工具函数后，我们可以开始实现K-均值算法。</p><h2 id="实现K-均值算法"><a href="#实现K-均值算法" class="headerlink" title="实现K-均值算法"></a>实现K-均值算法</h2><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>我们需要首先配置好开发环境。整个开发环境和第一章中提到的基本相同，以下为创建的具体过程。</p><p>首先，创建一个目录。比如可以全名为<code>Ch4-kmeans</code>。在此目录中创建一个子目录<code>src</code>。</p><p>其次，在项目根目录添加一个名为<code>package.json</code>的文件, 并输入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;: &quot;Ch4-kmeans&quot;,  </span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,  </span><br><span class="line">  &quot;description&quot;: &quot;ML in JS Example for Chapter 4 - kmeans&quot;,  </span><br><span class="line">  &quot;main&quot;: &quot;src&#x2F;index.js&quot;,  </span><br><span class="line">  &quot;author&quot;: &quot;Burak Kanber&quot;,  </span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,  </span><br><span class="line">  &quot;scripts&quot;: &#123;  </span><br><span class="line">    &quot;build-web&quot;: &quot;browserify src&#x2F;index.js -o dist&#x2F;index.js -t [ babelify --presets [ env ] ]&quot;,  </span><br><span class="line">    &quot;build-cli&quot;: &quot;browserify src&#x2F;index.js --node -o dist&#x2F;index.js -t [ babelify --presets [ env ] ]&quot;,  </span><br><span class="line">    &quot;start&quot;: &quot;yarn build-cli &amp;&amp; node dist&#x2F;index.js&quot;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  &quot;dependencies&quot;: &#123;  </span><br><span class="line">    &quot;babel-core&quot;: &quot;^6.26.0&quot;,  </span><br><span class="line">    &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;,  </span><br><span class="line">    &quot;babelify&quot;: &quot;^8.0.0&quot;,  </span><br><span class="line">    &quot;browserify&quot;: &quot;^15.1.0&quot;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在创建完成<code>package.json</code>文件为，切换到控制台程序中，在<code>Ch4-kmeans</code>项目根目录中执行命令<code>yarn install</code>。</p><p>接下来，在<code>Ch4-kmeans/src</code>目录中添加三个文件:  <code>index.js</code>,  <code>data.js</code>,  与  <code>kmeans.js</code>。我们将在<code>kmeans.js</code>中完成整个K-均值算法的实现, 同时会在<code>data.js</code>中加载一些测试简单的数据集,  最终将使用<code>index.js</code> 做为我们的程序启动入口并运行一系列的测试示例。</p><p>现在你可能想停下来并测试一下上述我们的设置是否可以正常运行。在<code>index.js</code> 中添加一行简单的代码<code>console.log(&quot;Hello&quot;);</code> 并在控制台程序中执行<code>yarn start</code>  。你将会发现源代码被编译与执行，同时在程序退出前在屏幕上输出<code>Hello</code> 。如果你得到了一些错误代码或者没有看到<code>Hello</code>，你可能需要重新检查你是否按照上述步骤进行了环境的配置。</p><h3 id="初始化算法"><a href="#初始化算法" class="headerlink" title="初始化算法"></a>初始化算法</h3><p>在这一节中，我们将在<code>kmeans.js</code>文件中实现算法。首先是将上述的均值及距离计算的函数添加到文件的顶部。因为它们是通用性的静态函数，我们不会将其放入类的定义中。<br>将以下代码放放文件的顶部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**  </span><br><span class="line"> * 计算给定数组的均值</span><br><span class="line"> * @param &#123;Array.&lt;number&gt;&#125; numbers  </span><br><span class="line"> * @return &#123;number&#125;  </span><br><span class="line"> *&#x2F;</span><br><span class="line"> const mean &#x3D; numbers &#x3D;&gt; numbers.reduce((sum, val) &#x3D;&gt; sum + val, 0) &#x2F; numbers.length;  </span><br><span class="line">  </span><br><span class="line">&#x2F;**  </span><br><span class="line"> * 计算给定的两个数据点的距离</span><br><span class="line"> * @param &#123;Array.&lt;number&gt;&#125; a  </span><br><span class="line"> * @param &#123;Array.&lt;number&gt;&#125; b  </span><br><span class="line"> * @return &#123;number&#125;  </span><br><span class="line"> *&#x2F;</span><br><span class="line"> const distance &#x3D; (a, b) &#x3D;&gt; Math.sqrt(  </span><br><span class="line">    a.map((aPoint, i) &#x3D;&gt; b[i] - aPoint)  </span><br><span class="line">     .reduce((sumOfSquares, diff) &#x3D;&gt; sumOfSquares + (diff*diff), 0)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>接下来，创建并导出<code>KMeans</code>类. 我们将在本章节接下来的内容中在这个类中加入多个函数。 先将以下代码加入到上述工具函数之下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class KMeans &#123;  </span><br><span class="line">   &#x2F;**  </span><br><span class="line">   * @param k  </span><br><span class="line">   * @param data  </span><br><span class="line">   *&#x2F;  </span><br><span class="line">    constructor(k, data) &#123;  </span><br><span class="line">        this.k &#x3D; k;  </span><br><span class="line">        this.data &#x3D; data;  </span><br><span class="line">        this.reset();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  &#x2F;**  </span><br><span class="line">   * Resets the solver state; use this if you wish to run the * same solver instance again with the same data points * but different initial conditions. *&#x2F;  reset() &#123;  </span><br><span class="line">        this.error &#x3D; null;  </span><br><span class="line">        this.iterations &#x3D; 0;  </span><br><span class="line">        this.iterationLogs &#x3D; [];  </span><br><span class="line">        this.centroids &#x3D; this.initRandomCentroids();  </span><br><span class="line">        this.centroidAssignments &#x3D; [];  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">export default KMeans;</span><br></pre></td></tr></table></figure><p>我们已经创建了一个<code>KMeans</code>类并将其做为默认的导出模块。上述代码同时初始化了一些类所需要的实例变量，具体如下：</p><p>类的构造函数接受两个参数，<code>k</code>与<code>data</code>, 它们将在初始化过程中被赋值保存到对应的实例变量中。参数<code>k</code>代表了K-均值中的<code>K</code>, 或者说算法输出中的聚类的个数。参数<code>data</code>代表了算法将要处理的数据集数组。</p><p>在构造函数最后，我们调用了<code>reset()</code>方法，它是用来初始化(或重置)算法的状态。我们在<code>reset</code>方法中初始化的实例变量有：</p><ul><li><code>iterations</code>, 简单的计数量变量，来记录算法运行的循环次数，从0开始</li><li><code>error</code>,  记录了当前循环中所有的数据点与其对应的重心聚点距离的均方根误差，即损失函数的值</li><li><code>centroidAssignments</code>, 由所有数据点索引组成的数据，其值为对应数据点相关联的重心聚点的索引</li><li><code>centroids</code>, 保存了当前循环中所有的重心聚点信息</li></ul><p>注意在<code>reset</code>方法中，我们调用了一个未定义的方法<code>this.initRandomCentroids()</code>。K-均值算法必须要有初始化的重心聚点才可以执行，所以这个方法的目的就是随机生成指定数目的重心聚点的信息。由于算法初始于一个随机状态，因此多次执行这个算法将会基于其不同的初始状态而得到不同的结果。这是K-均值算法所期望的一个属性，因为它很可能在某一次运行后得到的是一个局部优化解，所以如果基于不同的初始状态来多次运行这个程序，我们更有可能得到的是全局的优化解。</p><p>在我们生成随机重心聚点前需要得到一些预设信息。首先，我们要必须获得数据集的维度信息。是二维，三维，十维还是1324维？我们生成的随机重心聚点必须与已知数据集的维度相同。这是一个比较简单的问题，我们假设所有的数据点都拥有相同的维度，这样我们只需要检测数据集中的第一个数据点的信息即可得到维度信息。将下述方法加入到<code>KMean</code>类中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**  </span><br><span class="line"> * Determines the number of dimensions in the dataset. * @return &#123;number&#125;  </span><br><span class="line"> *&#x2F;getDimensionality() &#123;  </span><br><span class="line">    const point &#x3D; this.data[0];  </span><br><span class="line">    return point.length;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在生成随机初始化重心聚点信息时，另外一个需要考虑的地方就是我们的初始化重心聚点的位置应该与数据集中的数据尽可能地接近。例如，如果数据集中所有的数据点都是在(0,0)与(10,10)之间，你将不会想生成一个位置为(1200,740)的随机数据点。相似的，如果所有的数据点都是负值，你也不会想生成数值为正数的随机重心聚点数据。</p><p>为什么我们要关注随机重心聚点的初始值点？在这个算法中，数据点将被指定与其最近的重心聚点相关联，同时随着运行逐渐地将重心聚点拉到其所属的聚类的中心。如果所有重心聚点都在数据集的右边，那它们将会按照相似的连接路径与数据集相关联，这就导致所有数据点都被关联到其右侧与它们最近的一个重心聚点上，之后这个重心聚点将会被转化成一个局部的最优解。通过随机初始化重心聚点的操作，我们能够更大程度上避免这类的局部最优解的情况。</p><p>我们生成重心聚点初始位置的方法取决于数据集中所有数据点每一个维度的数值范围，在此范围内我们来生成对应维度的随机值。例如，给定数据集包含二维平面(x, y)上的三个数据点：(1,3), (5, 8)与(3, 0)。维度<code>x</code>处于1与5之间,维度<code>y</code>处于0与8之间。因此，在生成随机重心聚点的初始数据时，我们将在1和5之间随机选取一个数值做为随机重心聚点在维度<code>x</code>上的位置, 在0和8之间随机选取一个数值做为随机重心聚点在维度<code>y</code>上的位置。</p><p>我们可以使用JavaScript的数学函数<code>Math.min</code>   与  <code>Math.max</code>  来决定每个维度的数据取值范围。请将如下代码添加到<code>KMeans</code>类中:<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**  </span><br><span class="line"> * For a given dimension in the dataset, determine the minimum * and maximum value. This is used during random initialization * to make sure the random centroids are in the same range as * the data. * * @param n  </span><br><span class="line"> * @returns &#123;&#123;min: *, max: *&#125;&#125;  </span><br><span class="line"> *&#x2F;getRangeForDimension(n) &#123;  </span><br><span class="line">    const values &#x3D; this.data.map(point &#x3D;&gt; point[n]);  </span><br><span class="line">    return &#123;  </span><br><span class="line">        min: Math.min.apply(null, values),  </span><br><span class="line">        max: Math.max.apply(null, values)  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个方法首先从数据点的给定维度中收集了所有的数据值。之后返回了一个包含得到数据值的最小值与最大值的对象。例如对于之前例子中的三个数据点(1, 3), (5, 8)与(3, 0), 在调用<code>getRangeForDimension(0)</code>时会返回<code>&#123;min: 1, max: 5&#125;</code>, 在调用<code>getRangeForDimension(1)</code>时会返回<code>&#123;min: 0, max: 8&#125;</code>.</p><p>生成并保存一个包含所有维度数据数值范围的对象将会给初始化重心聚点提供极大的方便。请将如下方法加入<code>KMeans</code>的类中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**  </span><br><span class="line"> * Get ranges for all dimensions. * @see getRangeForDimension  </span><br><span class="line"> * @returns &#123;Array&#125; Array whose indices are the dimension number and whose members are the output of getRangeForDimension  </span><br><span class="line"> *&#x2F;getAllDimensionRanges() &#123;  </span><br><span class="line">    const dimensionRanges &#x3D; [];  </span><br><span class="line">    const dimensionality &#x3D; this.getDimensionality();  </span><br><span class="line">  </span><br><span class="line">    for (let dimension &#x3D; 0; dimension &lt; dimensionality; dimension++) &#123;  </span><br><span class="line">        dimensionRanges[dimension] &#x3D; this.getRangeForDimension(dimension);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    return dimensionRanges;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法遍历了所有的维度并逐一返回对应维度的最大最小值, 最终构造了一个以维度为索引的对象数组。稍后我们将会使用这个方法。现在，我们终于可以来生成随机化的重心聚点初始值了。这将需要生成K个重心聚点，通过遍历数据点的所有维度，在每个维度中选取一个在其最小最大值数值范围中的随机值。请将如下方法加入<code>KMean</code>类中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**  </span><br><span class="line"> * Initializes random centroids, using the ranges of the data * to set minimum and maximum bounds for the centroids. * You may inspect the output of this method if you need to debug * random initialization, otherwise this is an internal method. * @see getAllDimensionRanges  </span><br><span class="line"> * @see getRangeForDimension  </span><br><span class="line"> * @returns &#123;Array&#125;  </span><br><span class="line"> *&#x2F;initRandomCentroids() &#123;  </span><br><span class="line">  </span><br><span class="line">    const dimensionality &#x3D; this.getDimensionality();  </span><br><span class="line">    const dimensionRanges &#x3D; this.getAllDimensionRanges();  </span><br><span class="line">    const centroids &#x3D; [];  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; We must create &#39;k&#39; centroids.  </span><br><span class="line">  for (let i &#x3D; 0; i &lt; this.k; i++) &#123;  </span><br><span class="line">  </span><br><span class="line">        &#x2F;&#x2F; Since each dimension has its own range, create a placeholder at first  </span><br><span class="line">  let point &#x3D; [];  </span><br><span class="line">  </span><br><span class="line">        &#x2F;**  </span><br><span class="line"> * For each dimension in the data find the min&#x2F;max range of that dimension, * and choose a random value that lies within that range.         *&#x2F;  </span><br><span class="line">  for (let dimension &#x3D; 0; dimension &lt; dimensionality; dimension++) &#123;  </span><br><span class="line">            const &#123;min, max&#125; &#x3D; dimensionRanges[dimension];  </span><br><span class="line">            point[dimension] &#x3D; min + (Math.random()*(max-min));  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        centroids.push(point);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    return centroids;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述算法包含了两层循环。外层循环生成了K个重心聚点。由于数据集的数据维度是任意的，每一个维度自身的数据值范围也是任意的，我们必须遍历所有的纬度来生成随机的位置信息。如果你的数据集是三维的，那内层循环将会分别处理维度0,1,2，取得每个维度的最大最小值，之后选取一个随机值，但当得到的这个值指定给当前重心聚点的当前维度做为初始值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;聚类是接触无监督式学习时常见的一个问题。通常在你想将一个大的数据集重新编排组织成小的群组，或者是将其按逻辑相似性分解成小的群组时我们会考虑聚类。例如，你可以尝试将人口普查数据中的家庭收入分成三个群组：低收入，中等收入及高收入。如果你将家庭收的数据集做为指定的一种聚类算法的输</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="Machine Learning" scheme="http://blog.beendless.com/tags/Machine-Learning/"/>
    
    <category term="JavaScript" scheme="http://blog.beendless.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Set up SSL for website with Nginx and StartSSL</title>
    <link href="http://blog.beendless.com/2015/09/26/Set%20up%20SSL%20for%20website%20with%20Nginx%20and%20StartSSL/"/>
    <id>http://blog.beendless.com/2015/09/26/Set%20up%20SSL%20for%20website%20with%20Nginx%20and%20StartSSL/</id>
    <published>2015-09-26T14:04:47.000Z</published>
    <updated>2020-09-01T05:45:05.613Z</updated>
    
    <content type="html"><![CDATA[<p>If you enable HTTPS and set up the certifications correctly, which means data will not be decrypted or modified during the transportation. Today I try to enable SSL to my website. Here is what I did to make it happen: </p><p>First, you should make sure your website hosted with a dedicated IP address. Like me buy a VPS from linode. Also you should make sure your HTTP web server support SSL when you set up it. If you are using nginx, just add –with-http_ssl_module when you built it yourself (<a href="http://nginx.org/en/docs/http/ngx/_http/_ssl_module.html">http://nginx.org/en/docs/http/ngx\_http\_ssl_module.html</a>). </p><p>Secondly, you need to buy a certification. As we know all modern browsers will check CA, in order to recognized by the root authorities, you need to purchase one certificated through them.  Even you can self-signed one to testing which will show warning to users by browser.  Fortunately, there’re some authorities who supply free CA to users like startssl. It’s easy to get a free CA from them. Just sign up and follow the guidance from startssl, then you can get</p><ul><li><p>Your private key file  domain.key</p></li><li><p>Your issued certificate file domain.crt</p></li><li><p>StartSSL Root CA Certificate and StartSSL Intermediate CA Certificate for your server (ca.pem and sub.class1.server.ca.pem)</p></li><li><p>Now, you can do the below things to contact the certifications to one:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat sub.class1.server.ca.pem &gt;&gt; ca.pem</span><br><span class="line"></span><br><span class="line">cat domain.crt ca.pem &gt; server.crt</span><br></pre></td></tr></table></figure><ul><li>Then, upload your private key and generated certification server.crt to your server.  Open nginx.conf.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># HTTPS server</span><br><span class="line">#</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  server name here;</span><br><span class="line"></span><br><span class="line">    ssl_certificate      server.crt;</span><br><span class="line">    ssl\_certificate\_key  domain.key;</span><br><span class="line"></span><br><span class="line">    ssl\_session\_cache shared:SSL:10m;</span><br><span class="line">    ssl\_session\_timeout  5m;</span><br><span class="line">    ssl_ciphers  &quot;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !EXPORT !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS&quot;;</span><br><span class="line">    ssl\_prefer\_server_ciphers   on;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After that, restart your nginx and revisit your website, you will find your website support HTTPS now. Make sure you open 443 port in your firewall configuration.  If you want to forward all HTTP request to HTTPS, just add the configurations below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    listen       80;</span><br><span class="line">    error_page   497  https:&#x2F;&#x2F;$host$uri?$args;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is some useful links I followed:</p><ul><li><a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html">http://nginx.org/en/docs/http/ngx_http_ssl_module.html</a></li><li><a href="https://www.linode.com/docs/websites/nginx/how-to-install-nginx-and-a-startssl-certificate-on-debian-7-wheezy">https://www.linode.com/docs/websites/nginx/how-to-install-nginx-and-a-startssl-certificate-on-debian-7-wheezy</a></li><li><a href="https://www.ssllabs.com/ssltest/analyze.html">https://www.ssllabs.com/ssltest/analyze.html</a></li><li><a href="https://imququ.com/post/my-nginx-conf-for-security.html">https://imququ.com/post/my-nginx-conf-for-security.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;If you enable HTTPS and set up the certifications correctly, which means data will not be decrypted or modified during the transportation</summary>
      
    
    
    
    <category term="CS" scheme="http://blog.beendless.com/categories/CS/"/>
    
    
    <category term="DevOps" scheme="http://blog.beendless.com/tags/DevOps/"/>
    
  </entry>
  
</feed>
